spring.application.name=order-service

spring.config.import=optional:file:.env[.properties]

server.port=${PORT}
eureka.client.serviceUrl.defaultZone=${EUREKA_SERVER_URL}

eureka.instance.hostname=${spring.application.name}
eureka.instance.prefer-ip-address=false
eureka.instance.instance-id=${spring.application.name}:${random.value}

#Circuit breaker
#Actuator (Giám sát)
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Database
spring.datasource.url=${ORDER_SERVICE_DB_URL}
spring.datasource.username=${ORDER_SERVICE_DB_USER}
spring.datasource.password=${ORDER_SERVICE_DB_PASS}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Tăng thời gian chờ kết nối database lên 60 giây
spring.datasource.hikari.connection-timeout=60000

# Tăng thời gian chờ cho pool được khởi tạo thành công
spring.datasource.hikari.initialization-fail-timeout=60000

#Resilinece4j Properties
resilience4j.circuitbreaker.instances.order_product.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.order_product.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.order_product.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.order_product.slidingWindowSize=20
resilience4j.circuitbreaker.instances.order_product.failureRateThreshold=50
resilience4j.circuitbreaker.instances.order_product.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.order_product.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.order_product.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.order_product.ignore-exceptions[0]=com.Huy.Common.Exception.ResourceNotFoundException
resilience4j.circuitbreaker.instances.order_product.ignore-exceptions[1]=java.sql.SQLIntegrityConstraintViolationException
#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.order_product.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.order_product.max-attempts=3
resilience4j.retry.instances.order_product.wait-duration=1s
resilience4j.retry.instances.order_product.ignore-exceptions[0]=com.Huy.Common.Exception.ResourceNotFoundException
resilience4j.retry.instances.order_product.ignore-exceptions[1]=java.sql.SQLIntegrityConstraintViolationException



management.tracing.enabled=true
#100% request sẽ được thu thập và gửi đi.
management.tracing.sampling.probability=1.0
# endpoint của zipkin server
management.zipkin.tracing.endpoint=${ZIPKIN_ENDPOINT}

#Kafka producer configuration
spring.kafka.bootstrap-servers=${KAFKA_SERVER}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#Kafka consumer configuration
spring.kafka.consumer.group-id=orderId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.Huy.Common.Event
spring.kafka.consumer.properties.spring.json.use.type.headers=true


logging.level.org.hibernate=DEBUG
logging.level.org.springframework=DEBUG

spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD:abcxyz}
spring.data.redis.ssl.enabled=${REDIS_SSL:false}